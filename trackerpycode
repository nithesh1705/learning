import os
import datetime
import time
import schedule
import platform
from plyer import notification
from openpyxl import Workbook, load_workbook
from threading import Thread

TRACKER_FILE = "daily_task_tracker.xlsx"

# Create workbook if not exists
if not os.path.exists(TRACKER_FILE):
    wb = Workbook()
    ws = wb.active
    ws.title = "TaskTracker"
    ws.append(["Date", "Task", "Status"])  # New structure
    wb.save(TRACKER_FILE)

def play_beep():
    if platform.system() == "Windows":
        import winsound
        winsound.MessageBeep()
    else:
        print('\a')

def get_tasks_for_date(date_str):
    wb = load_workbook(TRACKER_FILE)
    ws = wb.active
    return [(i + 2, row[1].value, row[2].value) for i, row in enumerate(ws.iter_rows(min_row=2)) if row[0].value == date_str]

def add_task(task):
    wb = load_workbook(TRACKER_FILE)
    ws = wb.active
    ws.append([datetime.date.today().isoformat(), task, "Not Completed"])
    wb.save(TRACKER_FILE)
    print(f"‚úÖ Task '{task}' added.")

def remove_task():
    today = datetime.date.today().isoformat()
    tasks = get_tasks_for_date(today)
    if not tasks:
        print("üì≠ No tasks to remove.")
        return

    print("\nüóëÔ∏è Choose a task to remove:")
    for i, (_, task, status) in enumerate(tasks, 1):
        print(f"{i}. {task} ({status})")

    try:
        choice = int(input("Enter task number: "))
        if 1 <= choice <= len(tasks):
            row_index, task, _ = tasks[choice - 1]
            wb = load_workbook(TRACKER_FILE)
            ws = wb.active
            ws.delete_rows(row_index)
            wb.save(TRACKER_FILE)
            print(f"‚ùå Task '{task}' removed.")
        else:
            print("‚ö†Ô∏è Invalid choice.")
    except ValueError:
        print("‚ö†Ô∏è Invalid input.")

def mark_task_complete():
    today = datetime.date.today().isoformat()
    tasks = get_tasks_for_date(today)
    incomplete_tasks = [t for t in tasks if t[2] != "Completed"]

    if not incomplete_tasks:
        print("üì≠ No tasks to mark as complete.")
        return

    print("\n‚úÖ Choose a task to mark as completed:")
    for i, (_, task, _) in enumerate(incomplete_tasks, 1):
        print(f"{i}. {task}")

    try:
        choice = int(input("Enter task number: "))
        if 1 <= choice <= len(incomplete_tasks):
            row_index, task, _ = incomplete_tasks[choice - 1]
            wb = load_workbook(TRACKER_FILE)
            ws = wb.active
            ws[f"C{row_index}"].value = "Completed"
            wb.save(TRACKER_FILE)
            print(f"‚úÖ Task '{task}' marked as completed.")
        else:
            print("‚ö†Ô∏è Invalid choice.")
    except ValueError:
        print("‚ö†Ô∏è Invalid input.")

def show_tasks_for_date(date_str):
    tasks = get_tasks_for_date(date_str)
    if not tasks:
        print(f"‚ùå No tasks found for {date_str}.")
        return

    print(f"\nüìÖ Tasks for {date_str}:")
    for _, task, status in tasks:
        icon = "‚úÖ" if status == "Completed" else "üî∏"
        print(f"{icon} {task}")

def show_todays_tasks():
    today = datetime.date.today().isoformat()
    show_tasks_for_date(today)

def notify_tasks():
    today = datetime.date.today().isoformat()
    tasks = get_tasks_for_date(today)
    pending_tasks = [task for _, task, status in tasks if status != "Completed"]

    if pending_tasks:
        task_str = "\n".join([f"- {t}" for t in pending_tasks])
        notification.notify(
            title="üìù Your Pending Tasks for Today",
            message=task_str,
            timeout=10
        )
        play_beep()
    else:
        print("üéâ All tasks completed! Nothing to notify.")

def menu():
    while True:
        print("\nüõ†Ô∏è Task Assistant Menu:")
        print("1. Add Task")
        print("2. Remove Task")
        print("3. Mark Task as Completed")
        print("4. Show Tasks for a Specific Date")
        print("5. Show Today's Tasks")
        print("6. Exit")

        choice = input("Choose an option: ")

        if choice == '1':
            task = input("Enter the task: ")
            add_task(task)
        elif choice == '2':
            remove_task()
        elif choice == '3':
            mark_task_complete()
        elif choice == '4':
            date_str = input("Enter the date (YYYY-MM-DD): ")
            show_tasks_for_date(date_str)
        elif choice == '5':
            show_todays_tasks()
        elif choice == '6':
            print("üëã Exiting Assistant...")
            break
        else:
            print("‚ùå Invalid choice. Try again.")

# Scheduler
schedule.every().hour.do(notify_tasks)

if __name__ == "__main__":
    print("üìò Daily Task Assistant is Running...")

    menu_thread = Thread(target=menu)
    menu_thread.start()

    while True:
        schedule.run_pending()
        time.sleep(1)
